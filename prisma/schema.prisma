generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["connectOrCreate"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AchievementAsset {
  id            Int
  key           String
  value         String?
  achievementId Int?         @map("achievement_id")
  achievement   Achievement? @relation("achievement_assetsToachievements", fields: [achievementId], references: [id])

  @@id([id, key])
  @@map("achievement_assets")
}

model AchievementCategory {
  id                         Int                   @id
  name                       String
  isGuildCategory            Boolean?              @map("is_guild_category")
  displayOrder               Int?                  @map("display_order")
  parentCategoryId           Int?                  @map("parent_category_id")
  hordeQuantity              Int?                  @map("horde_quantity")
  hordePoints                Int?                  @map("horde_points")
  allianceQuantity           Int?                  @map("alliance_quantity")
  alliancePoints             Int?                  @map("alliance_points")
  achievementCategory        AchievementCategory?  @relation("achievement_categoriesToachievement_categories_parent_category_id", fields: [parentCategoryId], references: [id])
  otherAchievementCategories AchievementCategory[] @relation("achievement_categoriesToachievement_categories_parent_category_id")
  achievements               Achievement[]         @relation("achievement_categoriesToachievements")

  @@map("achievement_categories")
}

model AchievementCriterion {
  achievementId Int         @map("achievement_id")
  criteriaId    Int         @map("criteria_id")
  achievement   Achievement @relation("achievement_criteriaToachievements", fields: [achievementId], references: [id])
  criterion     Criterion   @relation("achievement_criteriaTocriteria", fields: [criteriaId], references: [id])

  @@id([achievementId, criteriaId])
  @@map("achievement_criteria")
}

model Achievement {
  id                                                                    Int                    @id
  categoryId                                                            Int?                   @map("category_id")
  name                                                                  String?
  description                                                           String?
  points                                                                Int?
  isAccountWide                                                         Boolean?               @map("is_account_wide")
  factionId                                                             String?                @map("faction_id")
  prerequisiteAchievementId                                             Int?                   @map("prerequisite_achievement_id")
  nextAchievementId                                                     Int?                   @map("next_achievement_id")
  displayOrder                                                          Int?                   @map("display_order")
  rewardDescription                                                     String?                @map("reward_description")
  rewardItemId                                                          Int?                   @map("reward_item_id")
  achievementCategory                                                   AchievementCategory?   @relation("achievement_categoriesToachievements", fields: [categoryId], references: [id])
  achievementsAchievementsToachievementsNextAchievementId               Achievement?           @relation("achievementsToachievements_next_achievement_id", fields: [nextAchievementId], references: [id])
  achievementsAchievementsToachievementsPrerequisiteAchievementId       Achievement?           @relation("achievementsToachievements_prerequisite_achievement_id", fields: [prerequisiteAchievementId], references: [id])
  achievementAssets                                                     AchievementAsset[]     @relation("achievement_assetsToachievements")
  achievementCriteria                                                   AchievementCriterion[] @relation("achievement_criteriaToachievements")
  otherAchievementsAchievementsToachievementsNextAchievementIds         Achievement[]          @relation("achievementsToachievements_next_achievement_id")
  otherAchievementsAchievementsToachievementsPrerequisiteAchievementIds Achievement[]          @relation("achievementsToachievements_prerequisite_achievement_id")
  criteria                                                              Criterion[]            @relation("achievementsTocriteria")

  @@map("achievements")
}

model Criterion {
  id                  Int                    @id
  description         String?
  amount              Int?
  showProgressBar     Boolean?               @map("show_progress_bar")
  isGold              Boolean?               @map("is_gold")
  operatorId          String?                @map("operator_id")
  factionId           String?                @map("faction_id")
  achievementId       Int?                   @map("achievement_id")
  parentCriteriaId    Int?                   @map("parent_criteria_id")
  achievement         Achievement?           @relation("achievementsTocriteria", fields: [achievementId], references: [id])
  criteriaOperator    CriteriaOperator?      @relation("criteriaTocriteria_operators", fields: [operatorId], references: [id])
  criterion           Criterion?             @relation("criteriaTocriteria_parent_criteria_id", fields: [parentCriteriaId], references: [id])
  achievementCriteria AchievementCriterion[] @relation("achievement_criteriaTocriteria")
  otherCriteria       Criterion[]            @relation("criteriaTocriteria_parent_criteria_id")

  @@map("criteria")
}

model CriteriaOperator {
  id       String      @id
  name     String?
  criteria Criterion[] @relation("criteriaTocriteria_operators")

  @@map("criteria_operators")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "provider_account_id")
  @@index([providerId], name: "provider_id")
  @@index([userId], name: "user_id")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model User {
  id            Int         @id @default(autoincrement())
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at")
  characters    Character[] @relation("charactersTousers")

  @@map("users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("verification_requests")
}

model UpdateError {
  id        Int      @id @default(autoincrement())
  code      String?
  meta      Json?
  entity    Json?
  error     String?
  createdAt DateTime @default(now())

  @@map("update_errors")
}

model Character {
  id        Int       @id
  userId    Int       @map("user_id")
  name      String?
  race      String?
  class     String?
  faction   String?
  gender    String?
  guildName String?   @map("guild_name")
  level     Int?
  realmId   Int?      @map("realm_id")
  lastLogin DateTime? @map("last_login")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  realm     Realm?    @relation("charactersTorealms", fields: [realmId], references: [id])
  user      User      @relation("charactersTousers", fields: [userId], references: [id])

  @@map("characters")
}

model Realm {
  id         Int         @id
  region     String?
  name       String?
  slug       String?
  timezone   String?
  category   String?
  type       String?
  characters Character[] @relation("charactersTorealms")

  @@map("realms")
}
